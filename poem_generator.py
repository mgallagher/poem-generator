# 'Poem' Generator
# 
# This is a program that I adapted from a C++ school assignment. 
# It reads in a text file of (ideally) a poem, counts how often 
# each word occurs and also how often following words occur. 
# A 'poem' is then generated by calling genereate_poem, which prints 
# to the console a string of words of a user specified length that 
# ends up sounding surprisingly similar to the original.

import string
import random

class FollowingWord(object):
    def __init__(self, word, count):
        self.word = word
        self.count = count

class FirstWord(object):
    def __init__(self, word, count):
        self.word = word
        self.count = count
        self.following_word_list = []  # FollowingWord Objects

    def process_following_word(self, findWord):
        found = False
        for nextWord in self.following_word_list:
            if nextWord.word == findWord:
                nextWord.count += 1
                found = True
                break
        if not found:
            w = FollowingWord(findWord, 1)
            self.following_word_list.append(w)

    def print_word_list(self):
        print "%s %i -> " % (self.word, self.count),
        for following_word in self.following_word_list:
            print "%s %i -> " % (following_word.word, following_word.count),

def to_lowercase_remove_punct(word):
    word = word.lower()
    word = word.translate(string.maketrans("", ""), string.punctuation)
    return word

def hash_poem(fileobj, table):
    precedingWord = ""
    for line in fileobj:
        for word in line.split():
            word = to_lowercase_remove_punct(word)
            # If word is found in the dictionary, increment count
            if word in table:
                table[word].count += 1
                p = table[precedingWord]
                p.process_following_word(word)
            # If not found, add it to the dictionary
            else:
                table[word] = FirstWord(word, 1)
                if precedingWord in table:
                    p = table[precedingWord]
                    p.process_following_word(word)
            precedingWord = word

def genereate_poem(generate_from, length, table):
    random.seed
    for i in range(length):
        print "%s" % generate_from,
        # Grab the FirstWord object from the dictionary
        word_in_table = table[generate_from]
        # Generate a random integer between 0 and the word count. The minus 1 is for when the loop below does not increment add_up enough to exceed the random number.
        rand_word_count = random.randint(0, word_in_table.count-1)
        add_up = 0
        # Loop through the following_word_list and add_up their counts until the sum exceeds the random number. Once this happens, this becomes our new word to generate_from
        for following_word in word_in_table.following_word_list:
            add_up += following_word.count
            if add_up > rand_word_count:
                generate_from = following_word.word
                break
    print "" # Line break in output

# OPEN FILE - Geen Eggs and Ham, by Dr. Seuss
poemFile = open('Green_Eggs_Ham.txt', 'r')
# Create our dictionary
word_table = {}
# Process the text file
hash_poem(poemFile, word_table)
# Generate from any word in the table
genereate_poem('sam', 20, word_table)
word_table.clear()

# OPEN FILE - Annabel Lee, by Edgar Allen Poe
poemFile = open('Annabel_Lee.txt', 'r')
hash_poem(poemFile, word_table)
genereate_poem('nevermore', 25, word_table)
word_table.clear()
